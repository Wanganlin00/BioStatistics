# 线性回归

[tidymodels](https://www.tidymodels.org/) specification

```{r}
library(tidymodels)
```

[parsnip](https://www.tidymodels.org/start/models/) for model fitting specification

```{r}
#linear model specification 线性模型规范
lm_spec <-linear_reg() |>
  set_mode("regression") |>
  set_engine("lm")  
lm_spec
```

[recipes and workflows](https://www.tidymodels.org/start/recipes/) to perform the pre-processing specification and transformations

[数据下载](https://www.statlearning.com/resources-second-edition)

```{r}
advertising<-read_csv("data/Advertising.csv")
income1<-read_csv("data/Income1.csv")
income2<-read_csv("data/Income2.csv")
```

## 简单线性回归

```{r}
p_sales<-function(x){
  ggplot(advertising,aes({{x}},sales))+
           geom_point(shape=21,color="red")+
           geom_smooth(formula = 'y ~ x',method = "lm",se=FALSE)
}
p_sales(TV)|p_sales(radio)|p_sales(newspaper)
```

```{r}
lm_sales_tv <- lm_spec |>  fit(sales ~ TV, data = advertising)

lm_sales_tv

#回归诊断图
plot(lm_sales_tv$fit)     

# 模型摘要
summary(lm_sales_tv$fit)

lm_sales_tv |>
  pluck("fit")

lm_sales_tv |>   
  pluck("fit") |>  
  summary()


# 参数估计值     
broom::tidy(lm_sales_tv)
# 模型统计信息
broom::glance(lm_sales_tv) 

# 预测
stats::predict(lm_sales_tv, new_data = advertising)
predict(lm_sales_tv, new_data = advertising, type = "conf_int")

# 比较观测值与预测值
bind_cols( predict(lm_sales_tv, new_data = advertising), advertising) |> 
  select(sales, .pred)

augment(lm_sales_tv, new_data = advertising) |>   
  select(sales, .pred)

# 可视化
bind_cols( predict(lm_sales_tv, new_data = advertising), advertising) |> 
  ggplot(aes(x = TV)) +
  geom_linerange(aes(ymin = sales, ymax = .pred)) +
  geom_point(aes(y = sales), color = "red") +
  geom_abline(intercept = coef(lm_sales_tv$fit)[1], slope = coef(lm_sales_tv$fit)[2],
              color = "blue", size = 1)
```

## 多元线性回归

```{r}
#第一步，检测变量相关关系
ad <- advertising[-1]
cor(ad)
car::scatterplotMatrix(ad)  # 多重共线性

#第二步，多元线性回归
lm_sales_3 <- lm_spec |> fit(sales~TV+radio+newspaper,data = advertising)
summary(lm_sales_3$fit)



#回归检验

confint(lm_sales_3$fit)  # 95%置信区间
plot(lm_sales_3$fit) #回归诊断图
```

## 交互项

```{r}
lm_sales_tv_radio <- lm_spec |>  fit(sales ~ TV+radio+TV:radio, data = advertising)

lm_sales_tv_radio
```

```{r}
# pre-processing specification

rec_spec_interact <- recipe(sales ~ TV+radio, data = advertising) |>  
  step_interact(~ TV:radio) 

rec_spec_interact

# combine the linear regression model specification with the pre-processing specification
lm_sales_tv_radio_interact <- workflow() |>  
  add_model(lm_spec) |>  
  add_recipe(rec_spec_interact)  

lm_sales_tv_radio_interact

lm <- lm_sales_tv_radio_interact |> fit(advertising)
tidy(lm)
glance(lm)
```

## 变换

### 非线性变换

```{r}

rec_spec_square <- recipe(sales ~ TV, data = advertising) |>  
  step_mutate(TV2 = TV^2)  
rec_spec_square

lm_wf_square <- workflow() |>  
  add_model(lm_spec) |>  
  add_recipe(rec_spec_square)  

lm_wf_square |>
  fit(advertising)

```

### 对数变换

```{r}

rec_spec_log <- recipe(sales ~ TV, data = advertising) |>  
  step_log(TV)  

lm_wf_log <- workflow() |> 
  add_model(lm_spec) |>  
  add_recipe(rec_spec_log) 

lm_wf_log |>
  fit(advertising)
```

## 回归诊断

```{r}
library(car)
```

#### 线性假设

残差图

```{r}
plot(lm_sales_3$fit,1)  
crPlots(lm_sales_3$fit)
```

#### 正态性假设Q-Q图

Standardized Residuals

```{r}
plot(lm_sales_3$fit,2) 
summary(powerTransform(lm_sales_3$fit))  
```

```{r}
plot(lm_sales_tv$fit,3)
```

#### 误差相关性

```{r}
durbinWatsonTest(lm_sales_3$fit)      #结果表明rho=0
```

#### 误差项的方差齐性

```{r}
ncvTest(lm_sales_3$fit)
spreadLevelPlot(lm_sales_3$fit)
```

#### 异常观测点

```{r}
# studentized residual Plot
residplot<-function(fit,nbreaks=10){
  z<-rstudent(fit)
  hist(z,breaks=nbreaks,freq=FALSE)     #密度直方图
  title(xlab="Studentized Residual")
  rug(z,col="brown")                    #轴须图
  curve(dnorm(x,mean=mean(z),sd=sd(z)),add=TRUE,col="blue",lwd=2) #正态密度曲线
  lines(density(z)$x,density(z)$y,col="red",lwd=2)       #样本密度曲线
  legend("topright",c("Normal Curve","Kernel Density Curve"),#图例
  lty = c(3,2),pch = c(21,22),col=c("blue","red"),cex=.7)
}
residplot(lm_sales_tv$fit)
```

```{r eval=FALSE}
#######################################################################
library(car)
outlierTest(lm_sales_tv$fit)            #离群点
#高杠杆值点
hat.plot<-function(fit){
  p<-length(coefficients(fit)) #模型估计的参数数目（包含截距项）
  n<-length(fitted(fit))       #样本量
  plot(hatvalues(fit),main="Index Plot of Hat Values")#帽子值
  abline(h=c(2,3)*p/n,col="red",lty=2)  #大于帽子均值p/n的2或3倍被认为是高杠杆值
  identity(1:n,hatvalues(fit),names(hatvalues(fit)))
}
hat.plot(lm_sales_tv$fit)
####强影响点
#Cook's D图形    大于4/(n-k-1)  k为预测变量数目
cutoff<-4/(nrow(states)-length(fit$coefficients)-2)
plot(fit3,which=4,cook.levels=cutoff)
abline(h=cutoff,lty=2,col="red")
#变量添加图
avPlots(fit3,ask=FALSE,id.method="identity")

###
influencePlot(fit3,id.method="identity",main="Influence Plot")
```

##### Cook's distance

```{r}
plot(lm_sales_tv$fit,4)
```

##### Leverage

```{r}
plot(lm_sales_tv$fit,5)
```

```{r}
plot(lm_sales_tv$fit,6)
```

#### 多重共线性

```{r}
vif(lm_sales_3$fit)

sqrt(vif(lm_sales_3$fit))>=2       #vif平方根 ≥2 存在
summary(lm_sales_3$fit)
```

## 模型选择和优化

```{r}
########################两模型比较
lm1 <- lm_spec |> fit(sales~TV+radio+newspaper,data = advertising)
lm2 <- lm_spec |> fit(sales~TV*radio*newspaper,data = advertising[-1])

anova(lm2$fit,lm1$fit) #anova() 嵌套模型


##########################################            AIC 
AIC(lm2$fit,lm1$fit)  # 赤池信息准则  AIC值小的优先选择
#BIC


####################################相对重要性##################################
ad <- scale(advertising[-1])
ad
#R平方贡献率  #相对权重 
relweights<-function(fit,...){
  R<-cor(fit$model)
  nvar<-ncol(R)
  rxx<-R[2:nvar,2:nvar]
  rxy<-R[2:nvar,1]
  svd<-eigen(rxx)
  evec<-svd$vectors
  ev<-svd$values
  delta<-diag(sqrt(ev))
  lambda<-evec %*%delta %*% t(evec)
  lambdaasq<-lambda^2
  beta<-solve(lambda) %*% rxy
  r2<-colSums(beta^2)
  rawwgt<-lambdaasq%*%beta^2
  import<-(rawwgt/r2)*100            #计算相对权重
  import<-data.frame(Weights=import)  #数据框化
  row.names(import)<-names(fit$model[2:nvar])
  import<-import[order(import$Weights),1,drop=FALSE] #升序排序
  dotchart(import$Weights,labels=row.names(import),   #点图
           xlab = "% of R-Square",pch=19,
           main="Relative Importiance of Predictor Variables ",
           sub=paste("Total R-Square =",round(r2,digits = 3)),
  ...)
return(import)
}
relweights(lm1$fit,col="blue")
```
